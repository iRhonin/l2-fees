/*
Fees are calculated as follows (https://community.optimism.io/docs/developers/l2/new-fees.html):

Total transaction fee is a combination of an "L2 execution fee" and an "L1 security fee":

total_fee = (l2_gas_price * l2_gas_used) + (l1_gas_price * l1_gas_used)

Where:
- `l2_gas_price` corresponds to the cost of execution on L2
- `l2_gas_used` corresponds to the amount of gas used on L2
- `l1_gas_price` corresponds to the cost of publishing the transaction data on L1
- `l1_gas_used` corresponds to the amount of transaction data published on L1
*/

import { Context } from '@cryptostats/sdk';
import { getEthPrice } from './utils';

export function setup(sdk: Context) {
  const OP_GAS_PREDEPLOY = '0x420000000000000000000000000000000000000F';
  const OP_GAS_ABI = [
    {
      inputs: [
        {
          internalType: 'bytes',
          name: '_data',
          type: 'bytes',
        },
      ],
      name: 'getL1Fee',
      outputs: [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
      stateMutability: 'view',
      type: 'function',
    },
  ];

  const provider = sdk.ethers.getProvider('optimism');
  const gasPredeployContract = sdk.ethers.getContract(OP_GAS_PREDEPLOY, OP_GAS_ABI, 'optimism');

  const getTransferEthCost = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 21000;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x38d7ea4c68000', // 0.001 ETH
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0xcafebeefcafebeefcafebeefcafebeefcafebeef',
        data: '0x',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  const getTransferTokenCost = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 45690;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0x94b008aa00579c1307b0ef2c499ad98a8ce58e58',
        data:
          '0xa9059cbb00000000000000000000000023e7039c34c7aa47a0d4e975fbc789e0f763fa640000000000000000000000000000000000000000000000000000000000000001',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  const getUniswapV3SwapEthToUsdc = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 217112;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0xe592427a0aece92de3edee1f18e0157c05861564',
        data:
          '0x414bf38900000000000000000000000042000000000000000000000000000000000000060000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000a3b2b995d1a27fe3d3934ae2b0c2eab7c4bc9fd10000000000000000000000000000000000000000000000000000000061f5cbe90000000000000000000000000000000000000000000000000044364c5bb000000000000000000000000000000000000000000000000000000000000002ec4d7e0000000000000000000000000000000000000000000000000000000000000000',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  const getUniswapV3AddLiquidityEthUsdc = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 529111;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0xe592427a0aece92de3edee1f18e0157c05861564',
        data:
          '0xac9650d8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000c4219f5d17000000000000000000000000000000000000000000000000000000000000ec7900000000000000000000000000000000000000000000000001999d8262a3e3140000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000001972af86f3498670000000000000000000000000000000000000000000000000000000005db0fd30000000000000000000000000000000000000000000000000000000061f4ef6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  const getUniswapV3RemoveLiquidityEthUsdc = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 501698;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0xe592427a0aece92de3edee1f18e0157c05861564',
        data:
          '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000a40c49ccbe000000000000000000000000000000000000000000000000000000000001159b00000000000000000000000000000000000000000000000000000182558e6adc0000000000000000000000000000000000000000000000000031341096935f740000000000000000000000000000000000000000000000000000000000644e3b0000000000000000000000000000000000000000000000000000000061f5ba02000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084fc6f7865000000000000000000000000000000000000000000000000000000000001159b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000332294f668c339000000000000000000000000b39c657014729fec231a1a43df1a50a8445be169000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064df2ab5bb0000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000007dee90000000000000000000000000b39c657014729fec231a1a43df1a50a8445be16900000000000000000000000000000000000000000000000000000000',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  const getMatchaEthUsdc = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 364883;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0xdef1abe32c034e558cdd535791643c58a13acc10',
        data:
          '0x415565b00000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000004c4b400000000000000000000000000000000000000000000000000006cc4d4689222f000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000004c4b40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000000000000004c4b400000000000000000000000000000000000000000000000000006cc4d4689222f0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b7f5c764cbc14f9669b88837ca1490cca17c316070001f44200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000004200000000000000000000000000000000000006ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000086003b044f70dac0abc80ac8957305b6370893ed00000000000000000000000000000000000000000000004dc93f412661f5c147',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  const getHopSendEth = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 407001;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0x86ca30bef97fb651b8d866d45503684b90cb3312',
        data:
          '0xeea0d7b200000000000000000000000000000000000000000000000000000000000000890000000000000000000000005231151cf5df1249679ccb6d946a4b6fe8deb7aa0000000000000000000000000000000000000000000000000016851e54fe587000000000000000000000000000000000000000000000000000005e82fceb95a30000000000000000000000000000000000000000000000000016030ce7d680c80000000000000000000000000000000000000000000000000000000061ff0b8d000000000000000000000000000000000000000000000000001600c1fe3c78690000000000000000000000000000000000000000000000000000000061ff0b8d',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  const getxPollinateSendEth = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 102154;
    const l1GasCostTx1 = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0x31efc4aeaa7c39e54a33fdc3c46ee2bd70ae0a09',
        data:
          '0xd94593720000000000000000000000000000000000000000000000000000000000000020000000000000000000000000cf4d2994088a8cde52fb584fe29608b63ec063b20000000000000000000000000de4c39a6820e2de238087213c2c0c67e269089200000000000000000000000092495600b72ef0e1fa22453b58938a9af49918ae0000000000000000000000000de4c39a6820e2de238087213c2c0c67e2690892000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de4c39a6820e2de238087213c2c0c67e26908920000000000000000000000000de4c39a6820e2de238087213c2c0c67e26908920000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000a4b1c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47099359ab5f6b333c3afb8a36dbd79e198c5cd7e9bbd308177e20b449ce27917090000000000000000000000000000000000000000000000000f43fc2c04ee00000000000000000000000000000000000000000000000000000000000061f9c74000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000de4c39a6820e2de238087213c2c0c67e269089200000000000000000000000092495600b72ef0e1fa22453b58938a9af49918ae0000000000000000000000000de4c39a6820e2de238087213c2c0c67e2690892000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f43fc2c04ee0000000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f277655d4dc9fed0000000000000000000000000de4c39a6820e2de238087213c2c0c67e269089299359ab5f6b333c3afb8a36dbd79e198c5cd7e9bbd308177e20b449ce27917090000000000000000000000000000000000000000000000000000000061f9c740c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000031efc4aeaa7c39e54a33fdc3c46ee2bd70ae0a09000000000000000000000000cf4d2994088a8cde52fb584fe29608b63ec063b20000000000000000000000000000000000000000000000000000000061f5d3ef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004119095959b58474c372557dedd2d0978eff2dc5e96cdeb4b64030361babf37e7b2560cae4de27d14c5ed0b5eef8688065ab23df5834f7d8cc848e96743ecded611c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCostTx1);
  };

  const getTorrnaoCashDepositEth = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 1127525;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0x0d5550d52428e7e3175bfc9550207e4ad3859b17',
        data:
          '0x13d98d1300000000000000000000000084443cfd09a48af6ef360c6976c5392ac5023a1f18abe02bcfdc130b86a27a8b976b70689dc26bb773a01668407e8a7c97fe4aa000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  const getTorrnaoCashWithdrawEth = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 366184;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0x0d5550d52428e7e3175bfc9550207e4ad3859b17',
        data:
          '0xb438689f00000000000000000000000084443cfd09a48af6ef360c6976c5392ac5023a1f00000000000000000000000000000000000000000000000000000000000001000c743f9b2474101ac21ca8e54bb729b69ac95e0aadb01fb1ebf4b5c65a1586b623d0418171d6cb64836ec0d3c28617a72c75e67a02b7c9d2e24be72dfef01da900000000000000000000000005fdaf0d7c8e6977f2bcb6b881da84665a9cf51000000000000000000000000020bb3095a4852f4c97d7a188e9f7183c85acfc4900000000000000000000000000000000000000000000000000002dd4560cdc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010005e498e9432ad4a6cdfd3789e7d63ea4aea5880e1fce3b5d7dd6bdb9ca493cb00d06949342356fcf278d11cc132ae64a34a4547282ab7433684e0410d442f38e2679a6f49729f3eae7d74dcfc708ff87eaecddc87c11bcc43599450eccc5428b0190aba650b534f94f8a4cf15903b1b4dde5605b3b9b3d0f0e38306069f81bab180fd0d66a69bd0d407c51e0d1560301e915ec5816e24e4b66eb4747b73d6a6620b1c567c555c11ab88799991a291a23dcd9f922dafce9868c9057a8ace86cad001a5d8a75e19d4ec821590517dd6124a8464bc89555c6c3b952c3f87f368c8e1334fed41f0029ea7def6a8063e590fede7d6b01bd615034419be0735323f7e3',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  const getSynthetixMintSusd = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 612946;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0x8700daec35af8ff88c16bdf0418774cb3d7599b4',
        data: '0xaf086c7e',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  const getSynthetixBurnSusd = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 745074;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0x8700daec35af8ff88c16bdf0418774cb3d7599b4',
        data: '0x295da87d00000000000000000000000000000000000000000000000c5756e7e77fe544ba',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  const getSynthetixClaimFees = async () => {
    const l2GasPrice = await provider.getGasPrice();
    const l2GasEstimate = 790005;
    const l1GasCost = await gasPredeployContract.getL1Fee(
      sdk.ethers.utils.serializeTransaction({
        nonce: 1234,
        value: '0x',
        gasPrice: l2GasPrice,
        gasLimit: l2GasEstimate,
        to: '0x4a16a42407aa491564643e1dfc1fd50af29794ef',
        data: '0xd294f093',
      })
    );
    return await calcTotalGasFee(l2GasPrice, l2GasEstimate, l1GasCost);
  };

  sdk.register({
    id: 'optimistic-ethereum',
    queries: {
      feeTransferEth: getTransferEthCost,
      feeTransferERC20: getTransferTokenCost,
      feeSwap: getUniswapV3SwapEthToUsdc,
      feeUniswapV3SwapEthToUsdc: getUniswapV3SwapEthToUsdc,
      feeUniswapV3AddLiquidityEthUsdc: getUniswapV3AddLiquidityEthUsdc,
      feeUniswapV3RemoveLiquidityEthUsdc: getUniswapV3RemoveLiquidityEthUsdc,
      fee1inchSwapEthToUsdc: getUniswapV3SwapEthToUsdc,
      // feeSushiSwapEthToUsdc: getFeeResolverForCost(706905),
      feeMatchaEthUsdc: getMatchaEthUsdc,
      feeHopSendEth: getHopSendEth,
      feexPollinateSendEth: getxPollinateSendEth,
      // //   feeAaveV2DepositEth: getFeeResolverForCost(240970),
      // //   feeAaveV2WithdrawEth: getFeeResolverForCost(902530),
      // //   feeAaveV2BarrowEth: getFeeResolverForCost(454266),
      feeTorrnaoCashDepositEth: getTorrnaoCashDepositEth,
      feeTorrnaoCashWithdrawEth: getTorrnaoCashWithdrawEth,
      feeSynthetixMintSusd: getSynthetixMintSusd,
      feeSynthetixBurnSusd: getSynthetixBurnSusd,
      feeSynthetixClaimFees: getSynthetixClaimFees,
    },
    metadata: {
      icon: sdk.ipfs.getDataURILoader(
        'QmS1mBxRRDjuVPAPkjrmrnVgzYwyfchjvRZTH11vgjqabG',
        'image/svg+xml'
      ),
      category: 'l2',
      name: 'Optimism',
      description:
        'Optimism is an EVM-equivalent Optimistic Rollup chain. It aims to be simple, fast, and secure.',
      l2BeatSlug: 'optimism',
      website: 'https://optimism.io',
      flags: {
        throtle:
          'Optimism is throttled while in beta. Fees will decrease as this throttle is lifted.',
      },
    },
  });

  async function calcTotalGasFee(l2GasPrice, l2GasEstimate: number, l1GasCost: any) {
    const totalGasCostWei = l2GasPrice.mul(l2GasEstimate).add(l1GasCost).toNumber();
    const ethPrice = await getEthPrice(sdk);
    return (totalGasCostWei * ethPrice) / 1e18;
  }
}
